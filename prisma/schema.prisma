generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
  GUEST
}

enum ReservationStatus {
  PENDING
  CANCEL
  RESERVED
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  role         Role          @default(GUEST)
  status       Boolean       @default(true)
  imageProfile String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  Address      Address[]
  reservations Reservation[]

  @@map("users")
}

model Address {
  id          String @id @default(uuid())
  cep         String
  logradouro  String
  numero      String
  complemento String
  bairro      String
  cidade      String
  estado      String
  pais        String
  userId      String
  user        User?  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("adresses")
}

model Room {
  id           String            @id @default(uuid())
  name         String
  description  String
  type         String
  price        Int
  images       String?
  status       ReservationStatus @default(PENDING)
  reservations Reservation[]

  @@map("rooms")
}

model Service {
  id           String        @id @default(uuid())
  Cofre        Int?
  Lavanderia   Int?
  Cafe         Int?
  Massagem     Int?
  Frigobar     Int?
  Transfer     Int?
  reservations Reservation[]

  @@map("services")
}

model Reservation {
  id               String    @id @default(uuid())
  peoples          Int       @default(0)
  checkIn          DateTime
  checkOut         DateTime
  cupom            String?
  total            Int       @default(0)
  totalDescount    Int       @default(0)
  confirmation     Boolean   @default(false)
  dateConfirmation DateTime?
  serviceId        String?
  roomId           String
  userId           String
  user             User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  room             Room?     @relation(fields: [roomId], references: [id])
  services         Service?  @relation(fields: [serviceId], references: [id])

  @@unique([userId, roomId, checkIn])
  @@map("reservations")
}

model Feedback {
  id        String  @id @default(uuid())
  pontuacao Int
  descricao String
  status    Boolean

  @@map("feedbacks")
}
